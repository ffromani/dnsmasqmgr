// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dnsmasqmgr.proto

package dnsmasqmgr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key int32

const (
	Key_HOSTNAME Key = 0
	Key_MACADDR  Key = 1
	Key_IPADDR   Key = 2
)

var Key_name = map[int32]string{
	0: "HOSTNAME",
	1: "MACADDR",
	2: "IPADDR",
}

var Key_value = map[string]int32{
	"HOSTNAME": 0,
	"MACADDR":  1,
	"IPADDR":   2,
}

func (x Key) String() string {
	return proto.EnumName(Key_name, int32(x))
}

func (Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3815698c51f4a73, []int{0}
}

type Address struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Macaddr              string   `protobuf:"bytes,2,opt,name=macaddr,proto3" json:"macaddr,omitempty"`
	Ipaddr               string   `protobuf:"bytes,3,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3815698c51f4a73, []int{0}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Address) GetMacaddr() string {
	if m != nil {
		return m.Macaddr
	}
	return ""
}

func (m *Address) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

type AddressRequest struct {
	Addr                 *Address `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key                  Key      `protobuf:"varint,2,opt,name=key,proto3,enum=dnsmasqmgr.Key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressRequest) Reset()         { *m = AddressRequest{} }
func (m *AddressRequest) String() string { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()    {}
func (*AddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3815698c51f4a73, []int{1}
}

func (m *AddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressRequest.Unmarshal(m, b)
}
func (m *AddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressRequest.Marshal(b, m, deterministic)
}
func (m *AddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRequest.Merge(m, src)
}
func (m *AddressRequest) XXX_Size() int {
	return xxx_messageInfo_AddressRequest.Size(m)
}
func (m *AddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRequest proto.InternalMessageInfo

func (m *AddressRequest) GetAddr() *Address {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddressRequest) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return Key_HOSTNAME
}

type AddressReply struct {
	Addr                 *Address `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status               int32    `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressReply) Reset()         { *m = AddressReply{} }
func (m *AddressReply) String() string { return proto.CompactTextString(m) }
func (*AddressReply) ProtoMessage()    {}
func (*AddressReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3815698c51f4a73, []int{2}
}

func (m *AddressReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressReply.Unmarshal(m, b)
}
func (m *AddressReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressReply.Marshal(b, m, deterministic)
}
func (m *AddressReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressReply.Merge(m, src)
}
func (m *AddressReply) XXX_Size() int {
	return xxx_messageInfo_AddressReply.Size(m)
}
func (m *AddressReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddressReply proto.InternalMessageInfo

func (m *AddressReply) GetAddr() *Address {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddressReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterEnum("dnsmasqmgr.Key", Key_name, Key_value)
	proto.RegisterType((*Address)(nil), "dnsmasqmgr.Address")
	proto.RegisterType((*AddressRequest)(nil), "dnsmasqmgr.AddressRequest")
	proto.RegisterType((*AddressReply)(nil), "dnsmasqmgr.AddressReply")
}

func init() { proto.RegisterFile("dnsmasqmgr.proto", fileDescriptor_b3815698c51f4a73) }

var fileDescriptor_b3815698c51f4a73 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x29, 0x68, 0xc1, 0x01, 0x0b, 0x59, 0x13, 0xd2, 0x90, 0x98, 0x68, 0x2f, 0x1a, 0x63,
	0x7a, 0xa8, 0x4f, 0x50, 0xac, 0x11, 0x83, 0x05, 0x52, 0x4c, 0xbc, 0x78, 0x59, 0xe8, 0xa4, 0x20,
	0x2c, 0x5b, 0x76, 0xb7, 0x26, 0x7d, 0x67, 0x1f, 0xc2, 0xb0, 0x16, 0xe4, 0xc0, 0xc1, 0x44, 0x6f,
	0xfd, 0xfb, 0x7f, 0xf9, 0x3a, 0x9d, 0x0c, 0xb4, 0xe2, 0x95, 0x64, 0x54, 0xae, 0x59, 0x22, 0xdc,
	0x54, 0x70, 0xc5, 0x09, 0xfc, 0xbc, 0x71, 0x5e, 0xa1, 0xea, 0xc7, 0xb1, 0x40, 0x29, 0x49, 0x07,
	0x6a, 0x33, 0x2e, 0xd5, 0x8a, 0x32, 0xb4, 0x8d, 0x0b, 0xe3, 0xfa, 0x24, 0xda, 0x65, 0x62, 0x43,
	0x95, 0xd1, 0x29, 0x8d, 0x63, 0x61, 0x97, 0x75, 0xb5, 0x8d, 0xa4, 0x0d, 0xe6, 0x3c, 0xd5, 0x45,
	0x45, 0x17, 0x45, 0x72, 0xde, 0xc0, 0x2a, 0xc4, 0x11, 0xae, 0x33, 0x94, 0x8a, 0x5c, 0xc1, 0x91,
	0xe6, 0x36, 0xee, 0xba, 0x77, 0xe6, 0xee, 0xcd, 0xb5, 0x25, 0x35, 0x40, 0x2e, 0xa1, 0xb2, 0xc0,
	0x5c, 0x7f, 0xc8, 0xf2, 0x9a, 0xfb, 0x5c, 0x1f, 0xf3, 0x68, 0xd3, 0x39, 0x43, 0x68, 0xec, 0xec,
	0xe9, 0x32, 0xff, 0xbd, 0xbb, 0x0d, 0xa6, 0x54, 0x54, 0x65, 0x52, 0xeb, 0x8f, 0xa3, 0x22, 0xdd,
	0xdc, 0x42, 0xa5, 0x8f, 0x39, 0x69, 0x40, 0xad, 0x37, 0x1c, 0xbf, 0x0c, 0xfc, 0xf0, 0xa1, 0x55,
	0x22, 0x75, 0xa8, 0x86, 0xfe, 0xbd, 0x1f, 0x04, 0x51, 0xcb, 0x20, 0x00, 0xe6, 0xd3, 0x48, 0x3f,
	0x97, 0xbd, 0x4f, 0x03, 0xac, 0x60, 0x30, 0x0e, 0xa9, 0x5c, 0x87, 0x74, 0x45, 0x13, 0x14, 0xa4,
	0x07, 0x56, 0xf1, 0xa3, 0xbb, 0x7d, 0x1e, 0x9a, 0xe2, 0x1b, 0xe9, 0xd8, 0x07, 0xbb, 0x74, 0x99,
	0x3b, 0x25, 0xf2, 0x08, 0xa7, 0xcf, 0x9c, 0x2f, 0xb2, 0xf4, 0x1f, 0x44, 0x01, 0x2e, 0x51, 0xe1,
	0x1f, 0x45, 0x5d, 0x0f, 0xce, 0xa7, 0x9c, 0xb9, 0xc9, 0x5c, 0xcd, 0xb2, 0x89, 0xcb, 0xf8, 0x3b,
	0xfd, 0x40, 0xb9, 0xc7, 0x77, 0x9b, 0xdb, 0x65, 0x24, 0x62, 0xb4, 0x39, 0xb1, 0x91, 0x31, 0x31,
	0xf5, 0xad, 0xdd, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x04, 0x32, 0x94, 0x54, 0x7f, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DNSMasqManagerClient is the client API for DNSMasqManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNSMasqManagerClient interface {
	RequestAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error)
	LookupAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error)
	DeleteAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error)
}

type dNSMasqManagerClient struct {
	cc *grpc.ClientConn
}

func NewDNSMasqManagerClient(cc *grpc.ClientConn) DNSMasqManagerClient {
	return &dNSMasqManagerClient{cc}
}

func (c *dNSMasqManagerClient) RequestAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := c.cc.Invoke(ctx, "/dnsmasqmgr.DNSMasqManager/RequestAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSMasqManagerClient) LookupAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := c.cc.Invoke(ctx, "/dnsmasqmgr.DNSMasqManager/LookupAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSMasqManagerClient) DeleteAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := c.cc.Invoke(ctx, "/dnsmasqmgr.DNSMasqManager/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSMasqManagerServer is the server API for DNSMasqManager service.
type DNSMasqManagerServer interface {
	RequestAddress(context.Context, *AddressRequest) (*AddressReply, error)
	LookupAddress(context.Context, *AddressRequest) (*AddressReply, error)
	DeleteAddress(context.Context, *AddressRequest) (*AddressReply, error)
}

func RegisterDNSMasqManagerServer(s *grpc.Server, srv DNSMasqManagerServer) {
	s.RegisterService(&_DNSMasqManager_serviceDesc, srv)
}

func _DNSMasqManager_RequestAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSMasqManagerServer).RequestAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsmasqmgr.DNSMasqManager/RequestAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSMasqManagerServer).RequestAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSMasqManager_LookupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSMasqManagerServer).LookupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsmasqmgr.DNSMasqManager/LookupAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSMasqManagerServer).LookupAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSMasqManager_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSMasqManagerServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnsmasqmgr.DNSMasqManager/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSMasqManagerServer).DeleteAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNSMasqManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnsmasqmgr.DNSMasqManager",
	HandlerType: (*DNSMasqManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAddress",
			Handler:    _DNSMasqManager_RequestAddress_Handler,
		},
		{
			MethodName: "LookupAddress",
			Handler:    _DNSMasqManager_LookupAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _DNSMasqManager_DeleteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnsmasqmgr.proto",
}
